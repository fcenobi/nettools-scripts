#!/bin/bash
if [[ "$1" =~ \-.*c.* ]]; then
        clear=true
fi
if [[ "$1" =~ \-.*s.* ]]; then
        noshut=true
fi
if [[ "${@: 1}" =~ \-d ]]; then
        description=true
        i=1
        for a in $@; do
                if [[ "[$a]" =~ \-d ]]; then
                        i=$(( $i + 1 ))
                        rstart=`echo "${@:$i:1}"`
                        i=$(( $i + 1 ))
                        rnum=`echo "${@:$i:1}"`
			break
                else
                        i=$(( $i + 1 ))
                fi
        done
        IFS='/' read -a d <<< "$rstart"
fi
i=0
lastarg="$#"
if [ -e "${!#}" ]; then
	lines=`cat "${!#}"`
else
	lines="${!#}"
fi
c=$(( $lastarg - 1 ))
card=`echo "${@:$c:1}"`
s=$(( $lastarg - 2 ))
start=`echo "${@:$s:1}"`
IFS='/' read -a l <<< "$start"
while read lines; do 
	line=`echo "$lines" | sed -e 's/[[:space:]]*$//'`
	if [[ "$line" =~ .*ospf.* ]]; then
		ospf=1
		routing=1
		mpls=0
		if [ -z "$resetospf" ]; then
			resetospf=1
			IFS='/' read -a l <<< "$start"
			firstrouting=1
		fi
	elif [[ "$line" =~ .*isis.* ]]; then
		isis=1
		routing=1
		mpls=0
		if [ -z "$resetisis" ]; then
			resetisis=1
			IFS='/' read -a l <<< "$start"
			firstrouting=1
		fi
	elif [[ "$line" =~ .*mpls.* ]]; then
		mpls=1
		routing=1
		if [ -z "$resetmpls" ]; then
			resetmpls=1
			IFS='/' read -a l <<< "$start"
			firstrouting=1
		fi
	elif [[ "$line" =~ .*multicast.* ]]; then
		multicast=1
		routing=1
		mpls=0
		if [ -z "$resetmulticast" ]; then
			resetmulticast=1
			IFS='/' read -a l <<< "$start"
			firstrouting=1
		fi
	elif [[ "$line" =~ .*pim.* ]]; then
		pim=1
		routing=1
		mpls=0
		if [ -z "$resetpim" ]; then
			resetpim=1
			IFS='/' read -a l <<< "$start"
			firstrouting=1
		fi
	fi
	current=`echo "$line" | sed 's/^.*E\([0-9]\+\/[0-9]\+\/[0-9]\+\/[0-9]\+\).*/\1/'`
	base=`echo "$line" | sed 's/^\(.*E[0-9]\+\/[0-9]\+\/[0-9]\+\/[0-9]\+\).*/\1/'`
	if [ -z "$last" ]; then
		last=`echo "$line" | sed 's/.*E\([0-9]\+\/[0-9]\+\/[0-9]\+\/[0-9]\+\).*/\1/'`
		if [ "$clear" ]; then
			if [ "$routing" ]; then
				printf "no $line\n"
			else
				printf "no interface TenGigE$current\n"
			fi
		fi
	elif [ "$last" != "$current" ]; then
		last="$current"
		l[3]=$(( ${l[3]} + 1 ))
		if [ "$firstrouting" == 1 ]; then  
			l[3]=$(( ${l[3]} - 1 ))
			firstrouting=0
		fi
		if [ "${l[3]}" -ge "$card" ]; then
			l[1]=$[ ${l[1]} + 1 ]
			l[3]=0
		fi
		if [ "$description" ]; then
			d[3]=$[ ${d[3]} + 1 ]
			if [ "${d[3]}" -ge "$rnum" ]; then
				d[1]=$[ ${d[1]} + 1 ]
				d[3]=0
			fi
		fi
		if [ "$clear" ]; then
			if [ "$routing" ]; then
				printf "no $line\n"
				if [ "$mpls" == 0 ]; then
					continue
				fi
			else
				printf "no interface TenGigE$current\n"
			fi
		fi
	fi
	if [[ "$description" ]] && [[ "$line" =~ "description" ]]; then
		echo "$line" | sed -e 's/[[:space:]]\+$//' \
			-e 's/[0-9]\+\/[0-9]\+\/[0-9]\+\/[0-9]\+/'${l[0]}'\/'${l[1]}'\/'${l[2]}'\/'${l[3]}'/' \
			-e 's/[0-9]\+\/[0-9]\+\/[0-9]\+\/[0-9]\+$/'${d[0]}'\/'${d[1]}'\/'${d[2]}'\/'${d[3]}'/' 
	elif [ "$noshut" ] && [ "$line" == "$base" ] && [ -z "$routing" ]; then 
		echo "$line" | sed -e 's/^/no\ /' -e 's/$/\ shutdown/' \
			-e 's/[0-9]\+\/[0-9]\+\/[0-9]\+\/[0-9]\+/'${l[0]}'\/'${l[1]}'\/'${l[2]}'\/'${l[3]}'/'
	else
		echo "$line" | sed 's/[0-9]\+\/[0-9]\+\/[0-9]\+\/[0-9]\+/'${l[0]}'\/'${l[1]}'\/'${l[2]}'\/'${l[3]}'/'
	fi
done <<< "$lines"
